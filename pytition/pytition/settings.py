"""
Django settings for pytition project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import logging
import os
import re
from pathlib import Path

import dj_database_url
import django.conf.locale
from django.urls import reverse_lazy
from django.conf import global_settings
from django.utils.translation import gettext_lazy
from dotenv import load_dotenv

from . import getenv_bool

logger = logging.getLogger(__name__)

BASE_DIR = Path(__file__).resolve().parent.parent

DOTENV_FILE = os.getenv("DOTENV_FILE")

if DOTENV_FILE is None:
    load_dotenv(dotenv_path=BASE_DIR.parent / ".env")
elif not os.access(Path(DOTENV_FILE).resolve(), os.R_OK):
    logger.error(
        "Environement variable 'DOTENV_FILE' is set but points to a file that is not readable"
    )
else:
    load_dotenv(dotenv_path=DOTENV_FILE)

DEBUG = getenv_bool("DEBUG", default=False)

SECRET_KEY = os.environ["SECRET_KEY"]

SITES = re.split(r"\s*,\s*", os.environ.get("SITES", ""))
ALLOWED_HOSTS = ['0.0.0.0', '127.0.0.1', 'localhost', '[::1]'] + SITES

# Application definition

INSTALLED_APPS = [
    'maintenance_mode',
    'tinymce',
    'colorfield',
    'petition.apps.PetitionConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'formtools',
    'phonenumber_field',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware',
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
]

ROOT_URLCONF = 'pytition.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'petition.helpers.footer_content_processor',
                'petition.helpers.settings_context_processor',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
                'maintenance_mode.context_processors.maintenance_mode',

            ],
        },
    },
]

WSGI_APPLICATION = 'pytition.wsgi.application'
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
DATABASES = {
    'default': dj_database_url.config(default=f"sqlite:///{BASE_DIR.parent / 'dev.sqlite3'}")
}

USE_MAIL_QUEUE = getenv_bool("USE_MAIL_QUEUE", False)

if USE_MAIL_QUEUE:
    INSTALLED_APPS += ('mailer',)
    # this enable mailer by default in django.send_email
    EMAIL_BACKEND = "mailer.backend.DbBackend"

# set it to True if you use the 'mailer' backend, and a external Crontab has been set
MAIL_EXTERNAL_CRON_SET = False

# number of seconds to wait before sending emails. This will be usefull only if USE_MAIL_QUEUE=True and uwsgi is used
UWSGI_WAIT_FOR_MAIL_SEND_IN_S = 10
# number of seconds to wait before retrying emails. This will be usefull only if USE_MAIL_QUEUE=True and uwsgi is used
UWSGI_WAIT_FOR_RETRY_IN_S = 1 * 60
# number of seconds to wait before purging emails. This will be usefull only if USE_MAIL_QUEUE=True and uwsgi is used
UWSGI_WAIT_FOR_PURGE_IN_S = 1 * 24 * 60 * 60
UWSGI_NB_DAYS_TO_KEEP = 3

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = True
X_FRAME_OPTIONS = "SAMEORIGIN"
LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"), )

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = os.getenv("STATIC_ROOT", "/static/")
STATIC_ROOT = os.getenv("STATIC_ROOT", global_settings.STATIC_ROOT)
LOGIN_URL = '/petition/login/'

TINYMCE_DEFAULT_CONFIG = {
    'plugins': 'print preview fullpage searchreplace autolink directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount imagetools contextmenu colorpicker textpattern help',
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 10,
    'toolbar1': 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat | fontselect | fontsizeselect',
    'insert_toolbar': 'forecolor backcolor',
    'fontsize_formats': '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
    'entity_encoding': 'raw',
    'relative_urls' : False,
    'convert_urls': True,
    'file_picker_types': 'image',
    'automatic_uploads': True,
    'images_upload_url': '/petition/image_upload',
    'image_upload_credentials': True,
    'images_upload_handler': """function(blobInfo, success, failure) {
        let xhr = new XMLHttpRequest();
        xhr.open('POST', get_image_upload_url());
        xhr.setRequestHeader('X-CSRFTOKEN', get_csrf_token()); // manually set header

        xhr.onload = function() {
            if (xhr.status !== 200) {
                failure('HTTP Error: ' + xhr.status);
                return;
            }

            let json = JSON.parse(xhr.responseText);

            if (!json || typeof json.location !== 'string') {
                failure('Invalid JSON: ' + xhr.responseText);
                return;
            }

            success(json.location);
        };

        let formData = new FormData();
        formData.append('file', blobInfo.blob(), blobInfo.filename());

        xhr.send(formData);
        }
    """,
    'setup': """function(ed) {
       ed.on('change', function(e) {
            set_mce_changed(ed);
       });}""",
}
TINYMCE_INCLUDE_JQUERY = True


LOGIN_REDIRECT_URL = reverse_lazy("user_dashboard")

#INDEX_PAGE_ORGA = "RAP"
#INDEX_PAGE_USER = "admin"
INDEX_PAGE = "HOME"
#INDEX_PAGE = "ORGA_PROFILE"
#INDEX_PAGE = "USER_PROFILE"
#INDEX_PAGE = "LOGIN_REGISTER"

PAGINATOR_COUNT = 12

# Anti bot feature
SIGNATURE_THROTTLE = 5 # 5 signatures from same IP allowed
SIGNATURE_THROTTLE_TIMING = 60*60*24 # in a 1 day time frame

LANGUAGES = [
    ('en', gettext_lazy('English')),
    ('es', gettext_lazy('Spanish')),
    ('fr', gettext_lazy('French')),
    ('it', gettext_lazy('Italian')),
    ('oc', gettext_lazy('Occitan')),
]

EXTRA_LANG_INFO = {
    'oc': {
        'code': 'oc',
        'name': 'Occitan',
    },
}
LANG_INFO = dict(django.conf.locale.LANG_INFO, **EXTRA_LANG_INFO)
django.conf.locale.LANG_INFO = LANG_INFO

FILE_UPLOAD_PERMISSIONS = 0o640
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o750

MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
# Following setting prevents error 500, due to issue #76 of django_maintenance_mode
MAINTENANCE_MODE_STATE_FILE_PATH = BASE_DIR.parent / "maintenance_mode_state.txt"

# User overridable settings in .env
SITE_NAME = os.getenv("SITE_NAME", "Pytition")
ALLOW_REGISTER = getenv_bool("ALLOW_REGISTER", True)
DISABLE_USER_PETITION = getenv_bool("DISABLE_USER_PETITION", False)
RESTRICT_ORG_CREATION = getenv_bool("RESTRICT_ORG_CREATION", False)
FOOTER_TEMPLATE = os.getenv("FOOTER_TEMPLATE")
DEFAULT_INDEX_THUMBNAIL = os.getenv("DEFAULT_INDEX_THUMBNAIL", "/img/petition_icon.svg")
MEDIA_ROOT = os.getenv("MEDIA_URL", BASE_DIR / "mediaroot")
MEDIA_URL = os.getenv("MEDIA_URL", "/mediaroot/")
DEFAULT_NOREPLY_MAIL = os.getenv("DEFAULT_NOREPLY_MAIL", f"noreply@{SITES[0] if SITES else '127.0.0.1'}")
PHONENUMBER_DEFAULT_REGION = os.getenv("PHONENUMBER_DEFAULT_REGION", "FR")

